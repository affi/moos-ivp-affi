/************************************************************/
/*    NAME: Janille Maragh                                  */
/*    ORGN: MIT                                             */
/*    FILE: PrimeFactorTester2.h                            */
/*    DATE: February 24, 2014                               */
/*    SUMMARY: This application subscribes to the MOOS      */
/*    variable "PRIME_RESULT", which is generated by the    */
/*    app pPrimeFactor2. It parses the string "PRIME_RESULT"*/
/*    for a number to be factorized (orig) and the string   */
/*    of its primes (also generated by pPrimeFactor). This  */
/*    app then generates the string of primes again, then   */
/*    compares it to pPrimeFactor's string of primes. It    */
/*    then publishes a new string, which is the received    */
/*    string concatenated with a statement: ",valid=true"   */
/*    if the strings of primes match up or ",valid=false"   */
/*    if they do not.                                       */
/************************************************************/

#ifndef PrimeFactorTester2_HEADER
#define PrimeFactorTester2_HEADER

#include "MOOS/libMOOS/MOOSLib.h"
#include <stdint.h>
#include <stdlib.h>
#include "MBUtils.h"
#include <string>
#include <iostream>
#include <vector>

using namespace std;

class PrimeFactorTester2 : public CMOOSApp
{
public:
    PrimeFactorTester2();
    ~PrimeFactorTester2();
    
protected:
    bool OnNewMail(MOOSMSG_LIST &NewMail);
    bool Iterate();
    bool OnConnectToServer();
    bool OnStartUp();
    void RegisterVariables();
    
//private:
    string received_string;      // string from PRIME_RESULT, from pPrimeFactor2
    string received_string_copy; // to concatenate with valid=true/valid=false
    string prime_string_in;      // obtained by parsing output of pPrimeFactor2
    string outgoing_var;         // NEVER USED
    string prime_string_test;    // primes string generated by tester
    string outgoing_string;
    
    vector<string> svector;      // stores the data in PRIME_RESULT, separating pieces
                                 // of data using commas as delimeters
    
    uint64_t original_value;     // store value to be factorized as unsigned long
    
    // Same functions as in PrimeFactor2
    void Factorize(uint64_t num);
    bool IsPrime(int i);
    string toString (const int t);
    
private: // State variables
    unsigned int m_iterations;
    double       m_timewarp;
};

#endif 
